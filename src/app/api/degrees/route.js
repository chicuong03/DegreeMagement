import { getContract } from "@/lib/contract";
import { connectToDatabase } from "@/lib/mongodb";
import { ethers } from "ethers";
import { NextResponse } from "next/server";

// üìå L·∫•y danh s√°ch b·∫±ng c·∫•p t·ª´ Blockchain
export async function GET() {
    try {
        const provider = new ethers.providers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL);
        const contract = getContract(provider);

        const ids = await contract.getAllDegreeIds();
        const degrees = await Promise.all(ids.map(async (id) => {
            const degree = await contract.getDegree(id);
            return {
                id: id,
                studentName: degree.studentName,
                university: degree.university,
                dateOfBirth: Number(degree.dateOfBirth),
                graduationDate: Number(degree.graduationDate),
                grade: degree.grade,
                score: Number(degree.score),
                ipfsHash: degree.ipfsHash,
                status: ["Pending", "Approved", "Rejected"][degree.status],
                issuer: degree.issuer,
                timestamp: Number(degree.timestamp)
            };
        }));

        return NextResponse.json({ success: true, degrees }, { status: 200 });
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch b·∫±ng c·∫•p:", error);
        return NextResponse.json({ success: false, message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch b·∫±ng c·∫•p!" }, { status: 500 });
    }
}

// üìå C·∫•p b·∫±ng c·∫•p m·ªõi tr√™n Blockchain
export async function POST(req) {
    try {
        await connectToDatabase();
        const { studentName, university, dateOfBirth, graduationDate, grade, score, ipfsHash, issuer } = await req.json();

        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
        if (!studentName || !university || !dateOfBirth || !graduationDate || !grade || !score || !ipfsHash) {
            return NextResponse.json({ success: false, message: "Thi·∫øu th√¥ng tin!" }, { status: 400 });
        }

        // K·∫øt n·ªëi Blockchain
        const provider = new ethers.providers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL);
        const wallet = new ethers.Wallet(process.env.NEXT_PUBLIC_PRIVATE_KEY, provider);
        const contract = getContract(wallet);

        // G·ªçi smart contract ƒë·ªÉ c·∫•p b·∫±ng c·∫•p
        const tx = await contract.issueDegree(studentName, university, dateOfBirth, graduationDate, grade, score, ipfsHash);
        await tx.wait();

        return NextResponse.json({ success: true, message: "B·∫±ng c·∫•p ƒë√£ ƒë∆∞·ª£c c·∫•p tr√™n Blockchain!" }, { status: 201 });
    } catch (error) {
        console.error("L·ªói khi c·∫•p b·∫±ng c·∫•p:", error);
        return NextResponse.json({ success: false, message: "C·∫•p b·∫±ng c·∫•p th·∫•t b·∫°i!" }, { status: 500 });
    }
}

// üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i b·∫±ng c·∫•p tr√™n Blockchain
export async function PUT(req) {
    try {
        const { id, status } = await req.json();

        if (!id || (status !== "Approved" && status !== "Rejected")) {
            return NextResponse.json({ success: false, message: "Thi·∫øu ID ho·∫∑c tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá!" }, { status: 400 });
        }

        // K·∫øt n·ªëi Blockchain
        const provider = new ethers.providers.JsonRpcProvider(process.env.NEXT_PUBLIC_RPC_URL);
        const wallet = new ethers.Wallet(process.env.NEXT_PUBLIC_PRIVATE_KEY, provider);
        const contract = getContract(wallet);

        let tx;
        if (status === "Approved") {
            tx = await contract.approveDegree(id);
        } else {
            tx = await contract.rejectDegree(id);
        }

        await tx.wait();

        return NextResponse.json({ success: true, message: `B·∫±ng c·∫•p ƒë√£ ƒë∆∞·ª£c ${status.toLowerCase()} tr√™n Blockchain!` }, { status: 200 });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
        return NextResponse.json({ success: false, message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i!" }, { status: 500 });
    }
}

// üìå Kh√¥ng th·ªÉ x√≥a b·∫±ng c·∫•p tr√™n Blockchain, ch·ªâ x√≥a trong DB n·∫øu c·∫ßn
// export async function DELETE(req) {
//     try {
//         await connectToDatabase();
//         const { id } = await req.json();

//         if (!id) {
//             return NextResponse.json({ success: false, message: "Thi·∫øu ID b·∫±ng c·∫•p!" }, { status: 400 });
//         }

//         const deletedCertificate = await Certificate.findByIdAndDelete(id);
//         if (!deletedCertificate) {
//             return NextResponse.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b·∫±ng c·∫•p!" }, { status: 404 });
//         }

//         return NextResponse.json({ success: true, message: "B·∫±ng c·∫•p ƒë√£ b·ªã x√≥a kh·ªèi DB!" }, { status: 200 });
//     } catch (error) {
//         console.error("L·ªói khi x√≥a b·∫±ng c·∫•p:", error);
//         return NextResponse.json({ success: false, message: "X√≥a b·∫±ng c·∫•p th·∫•t b·∫°i!" }, { status: 500 });
//     }
// }
