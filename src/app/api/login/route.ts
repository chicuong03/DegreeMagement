import { connectToDatabase } from "@/lib/mongodb";
import User from "@/models/User";
import bcrypt from "bcryptjs";
import { NextResponse } from "next/server";
import { z } from "zod";

// ‚úÖ X√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o
const loginSchema = z.object({
    email: z.string().email("Email kh√¥ng h·ª£p l·ªá"),
    password: z.string().min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±"),
});

export async function POST(request: Request) {
    try {
        await connectToDatabase(); // ‚úÖ K·∫øt n·ªëi MongoDB
        const body = await request.json();

        // ‚úÖ X√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o v·ªõi `zod`
        const validatedData = loginSchema.safeParse(body);
        if (!validatedData.success) {
            return NextResponse.json(
                { success: false, message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", errors: validatedData.error.format() },
                { status: 400 }
            );
        }

        const { email, password } = validatedData.data;

        // üîπ T√¨m user trong MongoDB theo email
        const user = await User.findOne({ email });
        if (!user) {
            return NextResponse.json(
                { success: false, message: "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c!" },
                { status: 401 }
            );
        }

        // üîπ Ki·ªÉm tra m·∫≠t kh·∫©u v·ªõi `bcrypt`
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return NextResponse.json(
                { success: false, message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" },
                { status: 401 }
            );
        }

        // üîπ T·∫°o response v√† set cookie v·ªõi role
        const response = NextResponse.json({
            success: true,
            user: {
                id: user._id,
                name: user.name,
                email: user.email,
                role: user.role.toLowerCase(),
            },
        });

        response.cookies.set("userRole", user.role.toLowerCase(), {
            secure: process.env.NODE_ENV === "production",
            sameSite: "strict",
            maxAge: 60 * 60 * 24, // 24 gi·ªù
        });

        return response;
    } catch (error) {
        console.error("L·ªói trong API login:", error);
        return NextResponse.json(
            { success: false, message: "ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!" },
            { status: 500 }
        );
    }
}

export async function GET() {
    return NextResponse.json(
        { message: "Please use POST method for login" },
        { status: 405 }
    );
}
