import { connectToDatabase } from "@/lib/mongodb";
import User from "@/models/User";
import bcrypt from "bcryptjs"; // 
import mongoose from "mongoose";
import { NextResponse } from "next/server";

// API x√≥a ng∆∞·ªùi d√πng theo ID

export async function DELETE(req, { params }) {
    try {
        const { id } = params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return NextResponse.json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá!" }, { status: 400 });
        }

        await connectToDatabase();
        const deletedUser = await User.findByIdAndDelete(id);

        if (!deletedUser) {
            return NextResponse.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" }, { status: 404 });
        }

        return NextResponse.json({ success: true, message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!" }, { status: 200 });

    } catch (error) {
        console.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
        return NextResponse.json({ success: false, message: "L·ªói m√°y ch·ªß!" }, { status: 500 });
    }
}

export async function PUT(req, { params }) {
    try {
        const { id } = params;
        const { name, email, role, password } = await req.json();

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return NextResponse.json({ success: false, message: "ID kh√¥ng h·ª£p l·ªá!" }, { status: 400 });
        }

        await connectToDatabase();

        // üîπ N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi, hash tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        let updatedFields = { name, email, role };
        if (password) {
            const hashedPassword = await bcrypt.hash(password, 10);
            updatedFields.password = hashedPassword;
        }

        // üîπ C·∫≠p nh·∫≠t th√¥ng tin user
        const updatedUser = await User.findByIdAndUpdate(id, updatedFields, { new: true });

        if (!updatedUser) {
            return NextResponse.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" }, { status: 404 });
        }

        return NextResponse.json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user: updatedUser }, { status: 200 });

    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
        return NextResponse.json({ success: false, message: "L·ªói m√°y ch·ªß!" }, { status: 500 });
    }
}