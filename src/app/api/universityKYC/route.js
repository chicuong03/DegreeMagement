import { connectToDatabase } from "@/lib/mongodb";
import University from "@/models/University";
import UniversityKYC from "@/models/universityKYC";
import User from "@/models/User";
import bcrypt from "bcryptjs";
import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

//  Tr∆∞·ªùng h·ªçc g·ª≠i y√™u c·∫ßu KYC
export async function POST(req) {
    try {
        await connectToDatabase();
        const { name, registrationNumber, email, phone, address, representative, documents } = await req.json();


        const existingUniversity = await UniversityKYC.findOne({
            $or: [{ registrationNumber }, { email }]
        });

        if (existingUniversity) {
            return NextResponse.json({
                success: false,
                message: "Tr∆∞·ªùng ƒë√£ ƒëƒÉng k√Ω KYC v·ªõi email ho·∫∑c m√£ ƒëƒÉng k√Ω n√†y!"
            }, { status: 400 });
        }


        const newUniversity = new UniversityKYC({
            name,
            registrationNumber,
            email,
            phone,
            address,
            representative,
            documents
        });

        await newUniversity.save();
        return NextResponse.json({ success: true, message: "ƒêƒÉng k√Ω KYC th√†nh c√¥ng, vui l√≤ng ch·ªù x√©t duy·ªát!" }, { status: 201 });
    } catch (error) {
        console.error("L·ªói x·∫£y ra trong API POST KYC:", error);
        return NextResponse.json({
            success: false,
            message: "L·ªói m√°y ch·ªß!",
            error: error.message
        }, { status: 500 });
    }
}



export async function GET() {
    try {
        await connectToDatabase();


        const pendingUniversities = await UniversityKYC.find({ status: "Pending" });

        console.log("D·ªØ li·ªáu t·ª´ MongoDB:", pendingUniversities); // l·ªói ƒë√¢y

        return NextResponse.json({ success: true, data: pendingUniversities }, { status: 200 });
    } catch (error) {
        console.error("L·ªói GET KYC:", error);
        return NextResponse.json({ success: false, message: "L·ªói m√°y ch·ªß", error: error.message }, { status: 500 });
    }
}



export async function PUT(req) {
    try {
        await connectToDatabase();
        const { id, action } = await req.json();

        console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ request:", { id, action });

        if (!id || !["approve", "reject"].includes(action)) {
            return NextResponse.json({ success: false, message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!" }, { status: 400 });
        }


        const kycRequest = await UniversityKYC.findById(id);
        console.log("KYC Request t·ª´ MongoDB:", kycRequest);

        if (!kycRequest) {
            return NextResponse.json({ success: false, message: "Tr∆∞·ªùng h·ªçc kh√¥ng t·ªìn t·∫°i!" }, { status: 404 });
        }

        if (action === "approve") {

            kycRequest.status = "Approved";
            await kycRequest.save();
            console.log("Tr·∫°ng th√°i KYC ƒë√£ c·∫≠p nh·∫≠t th√†nh 'Approved'!");

            // Ki·ªÉm tra n·∫øu tr∆∞·ªùng h·ªçc ƒë√£ t·ªìn t·∫°i trong b·∫£ng university
            let existingUniversity = await University.findOne({ email: kycRequest.email });
            if (!existingUniversity) {
                // Bi·∫øn ƒë·ªïi representative t·ª´ Object th√†nh String
                const representativeString = JSON.stringify(kycRequest.representative);

                existingUniversity = new University({
                    name: kycRequest.name,
                    email: kycRequest.email,
                    address: kycRequest.address,
                    representative: kycRequest.representative.name,
                    isAuthorized: false,
                });

                await existingUniversity.save();
                console.log("Th√™m tr∆∞·ªùng h·ªçc v√†o b·∫£ng University!");
            }




            // Ki·ªÉm tra n·∫øu user ƒë√£ t·ªìn t·∫°i trong b·∫£ng `user`
            let existingUser = await User.findOne({ email: kycRequest.email });
            if (!existingUser) {
                const hashedPassword = await bcrypt.hash("111111", 10);
                existingUser = new User({
                    name: kycRequest.name,
                    email: kycRequest.email,
                    password: hashedPassword,
                    role: "university",
                });

                await existingUser.save();
                console.log("T·∫°o t√†i kho·∫£n user th√†nh c√¥ng!");
            }

            // G·ª≠i email th√¥ng b√°o KYC th√†nh c√¥ng
            try {
                await sendKYCApprovalEmail(kycRequest.email, kycRequest.name);
                console.log("Email x√°c nh·∫≠n KYC ƒë√£ g·ª≠i th√†nh c√¥ng!");
            } catch (emailError) {
                console.error("L·ªói g·ª≠i email:", emailError);
            }

            return NextResponse.json({ success: true, message: "Duy·ªát KYC th√†nh c√¥ng & t√†i kho·∫£n ƒë√£ t·∫°o!" }, { status: 200 });

        } else if (action === "reject") {
            // T·ª´ ch·ªëi v√† x√≥a tt
            await UniversityKYC.findByIdAndDelete(id);
            console.log("ƒê√£ t·ª´ ch·ªëi v√† x√≥a y√™u c·∫ßu KYC!");

            return NextResponse.json({ success: true, message: "Tr∆∞·ªùng h·ªçc ƒë√£ b·ªã t·ª´ ch·ªëi & x√≥a!" }, { status: 200 });
        }

        return NextResponse.json({ success: false, message: "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá!" }, { status: 400 });

    } catch (error) {
        console.error("üî• L·ªói PUT KYC:", error);
        return NextResponse.json({ success: false, message: "L·ªói m√°y ch·ªß!", error: error.message }, { status: 500 });
    }
}


// H√†m g·ª≠i email x√°c nh·∫≠n KYC th√†nh c√¥ng
async function sendKYCApprovalEmail(email, universityName) {
    try {
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS,
            },
        });

        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "X√°c nh·∫≠n KYC ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n",
            html: `<p>Xin ch√†o <strong>${universityName}</strong>,</p>
                   <p>Y√™u c·∫ßu KYC c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát th√†nh c√¥ng!</p>
                   <p>Th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa b·∫°n:</p>
                   <ul>
                       <li><strong>Email:</strong> ${email}</li>
                       <li><strong>M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh:</strong> 111111</li>
                   </ul>
                   <p>Vui l√≤ng thay ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p.</p>
                   <p>Tr√¢n tr·ªçng,</p>
                   <p><strong>H·ªá th·ªëng qu·∫£n l√Ω b·∫±ng c·∫•p EDUCHAIN Tr√¢n Tr·ªçng !!</strong></p>`,
        };

        await transporter.sendMail(mailOptions);
        console.log("Email ƒë√£ g·ª≠i th√†nh c√¥ng!");

    } catch (error) {
        console.error("L·ªói g·ª≠i email:", error);
        throw error;
    }
}

